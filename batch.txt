# リンク
#============================================================

http://ykr414.com/dos/index.html

# コメント
#============================================================

rem コメント
:: コメント
:// コメント
:-- コメント


# コマンドライン引数全てに対して処理を行なう 方法1
#============================================================

:ARGVLOOP
IF "%~1" == "" goto ARGVLOOPEND
  echo %1
  shift /1
  goto ARGVLOOP
:ARGVLOOPEND

echo %0

# コマンドライン引数全てに対して処理を行なう 方法2
#============================================================

for %%p in (%*) do ( echo %p )

# 条件分岐
#============================================================

if 条件 コマンド
if 条件 ( コマンド ) else コマンド
if 条件 ( コマンド ) else ( コマンド )
if 条件 (
  コマンド
) else (
  コマンド
)

比較演算子
== EQU NEQ
LSS LEQ
GTR GEQ
NOT
DEFINED : 環境変数が存在するとき真
EXIST : ファイルやディレクトリが存在するとき真
ERRORLEVEL : %ERRORLEVEL%が値以上のとき真

※論理演算子はない

# 遅延変数を利用する
#============================================================

setlocal enabledelayedexpansion
set test="abc"
if %test% == "abc" (
  set test="def"
  echo !test!    #=> def
)
endlocal

# 何もしないコマンド
#============================================================

if 条件 ( echo > nul )

# 
#============================================================


# 
#============================================================



# コマンドリファレンス
#============================================================

# shift
#----------------------------------

バッチ ファイル中の置き換え可能なパラメータの位置を変更します。

SHIFT [/n]

コマンド拡張機能を有効にすると、SHIFT コマンドは、/n スイッチをサポート
するようになります。このスイッチを指定すると、コマンドはシフトを n 番
目の引数から開始します。n は、0 から 8 までの数です。たとえば、

    SHIFT /2

は、%3 を %2に、%4 を %3 にシフトし、%0 と %1 はシフトしません。


# cacls
#----------------------------------

ファイルのアクセス制御リスト(ACL) を表示または変更します。

CACLS ファイル名 [/T] [/E] [/C] [/G ユーザー名:アクセス権]
                 [/R ユーザー名 [...]] [/P ユーザー名:アクセス権 [...]]
                 [/D ユーザー名 [...]]
  ファイル名        ACL を表示します。
  /T                現在のディレクトリとすべてのサブディレクトリにある
                    指定されたファイルの ACL を変更します。
  /E                ACL を置き換えずに、ACL を編集します。
  /C                アクセス拒否エラーを無視して、ACL の変更を続行します。
  /G ユーザー名:アクセス権
                    指定されたユーザーにアクセス権を与えます。
                    アクセス権: R  読み取り
                                W  書き込み
                                C  変更 (書き込み)
                                F  フル コントロール
  /R ユーザー名     指定されたユーザーのアクセス権を失効させます。
                    (/E オプションと共に使用)。
  /P ユーザー名:アクセス権
                    指定されたユーザーのアクセス権を置き換えます。
                    アクセス権: N  なし
                                W  書き込み
                                R  読み取り
                                C  変更 (書き込み)
                                F  フル コントロール
  /D ユーザー名     指定されたユーザーのアクセスを拒否します。
複数のファイルを指定するには、ワイルドカードを使用できます。
複数のユーザーを指定できます。

省略形:
   CI - コンテナ継承。
        ACE はディレクトリに継承されます。
   OI - オブジェクト継承。
        ACE はファイルに継承されます。
   IO - 継承のみ。
        ACE は現在のファイル/ディレクトリに適用されません。

# set
#----------------------------------

cmd.exe 環境変数を表示、設定、または削除します。

SET [変数名=[文字列]]

  変数名   環境変数名を指定します。
  文字列   変数に割り当てる文字列を指定します。

現在の環境変数を表示するには、パラメータを指定せずに SET と入力してください。

コマンド拡張機能を有効にすると、SET は、次のように変更されます:

等号や値を指定せずに、変数名だけを指定して SET コマンドを実行すると、
SET コマンドに指定された名前に接頭辞が一致するすべての変数の値が
表示されます。たとえば、

    SET P

と入力すると、文字 'P' で始まるすべての変数が表示されます。

変数名が現在の環境に見つからない場合は、SET コマンドは、ERRORLEVEL を
1 に設定します。

SET コマンドでは、変数の名前に等符号を使用することはできません。

SET コマンドには、2 つの新しいスイッチが追加されています:

    SET /A 式
    SET /P 変数=[プロンプト文字列]

/A スイッチは、等号の右側の文字列が、評価すべき数式であることを
指定します。式の評価はごく単純で、次の操作がサポートされます。
操作は、優先順位の高い順に示されています:

    ()                  - グループ化
    ! ~ -               - 単項演算子
    * / %               - 算術演算子
    + -                 - 算術演算子
    << >>               - 論理シフト
    &                   - ビット演算子 AND
    ^                   - ビット演算子排他的 OR
    |                   - ビット演算子 OR
    = *= /= %= += -=   - 代入
      &= ^= |= <<= >>=
    ,                   - 式の区切り記号

論理演算子またはモジュール演算子を使う場合は、式文字列を引用符で
囲む必要があります。式内の数値以外の文字列は環境変数文字列として
処理され、使用される前に数値に変換されます。指定された環境変数名が
現在の環境で定義されていない場合は、値として 0 が使用されます。
これにより、いくつもの % 記号を入力して値を取得しないでも、環境
変数の値を算術演算に使うことができます。
コマンド スクリプト外でコマンド ラインから SET /A を実行すると、式の
最終的な値が表示されます。割り当て演算子を使うには、割り当て演算子
の左側に環境変数名が必要です。数値は 10 進数ですが、接頭辞として 0x
を付けると 16 進数、0 を付けると 8 進数になります。従って、0x12 は 18、
あるいは 022 と同じです。8 進表記を使う場合は、注意してください。08 や
09 は、8 と 9 が有効な 8 進数ではないため、有効な数値ではありません。


/P はユーザーによって入力された入力行を変数の値として設定できるようにします。
入力行を読み取る前に、指定されたプロンプト文字列を表示します。プロンプト文
字列は空でもかまいません。

環境変数の置換は、次のように拡張されます:

    %PATH:文字列1=文字列2%

は、PATH 環境変数を展開し、その結果に含まれるすべての "文字列1" を
"文字列2" に置き換えます。"文字列2" に空の文字列を指定すると、展開
された出力からすべての "文字列1" を削除することができます。"文字列1"
をアスタリスクで始め、展開された出力の先頭から、文字列1 の残りの部分
が最初に現れるまでのすべてを一致させることもできます。

また、展開の副文字列を指定することもできます。

    %PATH:~10,5%

は、PATH 環境変数を展開し、展開結果の 11 番目 (オフセット 10) の文字
から始まる 5 文字だけを使います。長さが指定されなかった場合は、変数の
値の残りの長さを既定値とします。オフセットまたは長さのどちらかが負の値
の場合、環境変数の値の長さに指定されたオフセットまたは長さを足してその
数を使います。

    %PATH:~-10%

は、パス変数の最後の10 文字が展開されます。

    %PATH:~0,-2%

は最後の 2 文字以外のすべてが展開されます。

最後に、遅延環境変数の展開が追加されました。このサポートは常に既定で
無効になっていますが、CMD.EXE の /V: のコマンド ライン スイッチを使
って有効または無効にできます。CMD /? を参照してください。

遅延環境変数の展開は、実行時ではなく、テキスト行を読み取るときに展開
されるという現在の制限を避けるために役立ちます。
次の例は即時変数展開の問題を説明しています。

    set VAR=before
    if "%VAR%" == "before" (
        set VAR=after;
        if "%VAR%" == "after" @echo If you see this, it worked
    )

この例は、論理的には IF 文が別の IF 文の本体に含まれる複合文なので、
両方の IF 文の %VAR% が、最初の IF 文を読み取ったときに展開されます。
このため、メッセージは決して表示されません。複合文の中の IF では "before"
と "after" が比較され、決して等しくはなりません。同様に次の例も期待し
たようには動作しません。

    set LIST=
    for %i in (*) do set LIST=%LIST% %i
    echo %LIST%

この例では、現在のディレクトリのファイルの一覧は作成されず、代わりに最後
に見つけられたファイルが LIST 変数に設定されます。これは %LIST% が FOR 文
が読み取られるとき、一度だけ展開され、そのときは LIST 変数は、空だからです。
つまり、実際に実行されている FOR ループは

    for %i in (*) do set LIST= %i

で、LIST に最後にみつけられたファイルを設定し続けているだけです。

遅延環境変数の展開では、実行時に環境変数を展開するために異なった文字
(感嘆符)を使うことができます。遅延環境変数の展開が有効な場合、上記の
例は次のように書くと意図したように動作します。

    set VAR=before
    if "%VAR%" == "before" (
        set VAR=after
        if "!VAR!" == "after" @echo If you see this, it worked
    )

    set LIST=
    for %i in (*) do set LIST=!LIST! %i
    echo %LIST%

コマンド拡張機能が有効な場合、SET によって表示される変数の一覧には
現れないいくつかの動的な環境変数があります。これらの変数の値は、変数の
値が展開されるときに動的に計算されます。ユーザーがこれらの名前の変数を
明示的に定義する場合、その定義は下記の動的な定義を無効にします。

%CD% - 現在のディレクトリ文字列に展開します。

%DATE% - DATE コマンドと同じフォーマットで現在の日付に展開します。

%TIME% - TIME コマンドと同じフォーマットで現在の時刻に展開します。

%RANDOM% - 0 から 32767 の間の任意の 10 進数に展開します

%ERRORLEVEL% - 現在の ERRORLEVEL の値に展開します。

%CMDEXTVERSION% - 現在のコマンド プロセッサ拡張機能のバージョン番号に
                     展開します。

%CMDCMDLINE% - コマンド プロセッサを起動したオリジナル コマンドライン
                 に展開します。


# echo
#----------------------------------

メッセージを表示したり、コマンド エコーの ON と OFF を切り替えます。

  ECHO [ON | OFF]
  ECHO [メッセージ]

現在のエコー設定を表示するには、パラメータを指定せずに ECHO と入力して
ください。


# for
#----------------------------------

指定されたコマンドをファイル セットの各ファイルに対して実行します。

FOR %変数 IN (セット) DO コマンド [コマンドパラメータ]

  %変数     単一文字の置き換え可能なパラメータを指定します。
  (セット)  ファイル セットを指定します。ワイルドカードを使用できます。
  コマンド  各ファイルごとに実行するコマンドを指定します。
  コマンドパラメータ
            指定されたコマンドのパラメータまたはスイッチを指定します。

バッチ プログラムで FOR コマンドを使用するときは、%変数の代わりに、
%%変数を使用してください。変数名では大文字と小文字が区別されるため、
%i と %I は異なります。

コマンド拡張機能を有効にすると、次の FOR コマンドの追加形式
がサポートされるようになります:

FOR /D %変数 IN (セット) DO コマンド [コマンドパラメータ]

    セットがワイルドカードを含む場合は、ファイル名ではなくディレクトリ名
    の一致を指定します。

FOR /R [[ドライブ:]パス] %変数 IN (セット) DO コマンド [コマンドパラメータ]

    [ドライブ:]パスから始めて、ツリーの各ディレクトリで FOR 文を実行し
    ます。/R の後にディレクトリが指定されていない場合は、現在の
    ディレクトリが使用されます。セットが単一のピリオド (.) である場合は、
    ディレクトリ ツリーの列挙だけを行います。


FOR /L %変数 IN (開始,ステップ,終了) DO コマンド [コマンドパラメータ]

    セットは、ステップの量ごとに変化する開始から終了までの数列です。
    たとえば、(1,1,5) は 1 2 3 4 5、(5,-1,1) は (5 4 3 2 1) という数列に
    なります。

FOR /F ["オプション"] %変数 IN (ファイル セット) DO コマンド
       [コマンド パラメータ]
FOR /F ["オプション"] %変数 IN ("文字列") DO コマンド [コマンド パラメータ]
FOR /F ["オプション"] %変数 IN ('コマンド') DO コマンド [コマンド パラメータ]

    または usebackq オプションの場合:

FOR /F ["オプション"] %変数 IN (ファイル セット) DO コマンド
       [コマンド パラメータ]
FOR /F ["オプション"] %変数 IN ('文字列') DO コマンド [コマンド パラメータ]
FOR /F ["オプション"] %変数 IN (`コマンド`) DO コマンド [コマンド パラメータ]

    ファイル名セットは、1 つ以上のファイル名です。各ファイルが開かれ、読み
    取られ、処理されてから、ファイル名セットの次のファイルに進みます。処理
    には、ファイルの読み取り、個々のテキスト行への分割と、0 個以上のトークン
    への解析が含まれます。その後、変数値を見つかったトークン文字列に設定して、
    for ループの本体が呼び出されます。既定では、/F は、各ファイルの各行から、
    空白で区切られた最初のトークンを渡します。空白行はスキップされます。既定
    の解析動作を変更するには、オプションの "オプション" パラメータを指定しま
    す。これは、異なる解析オプションを指定する 1 つ以上のキーワードを含む、
    引用符で囲まれた文字列です。キーワードは、次のとおりです:

        eol=c           - 行末のコメント文字を指定します (1 文字)。
        skip=n          - ファイルの先頭でスキップする行数を指定します。
        delims=xxx      - 区切り文字のセットを指定します。これは、既定の
                          区切り文字であるスペースとタブを置き換えます。
        tokens=x,y,m-n  - 各繰り返しに対して、各行から for 本体に渡すトー
                          クンを指定します。これにより、追加の変数名が割り当
                          てられます。m-n の形式は範囲で、m 番目から n 番目の
                          トークンを指定します。tokens= 文字列の最後の文字が
                          アスタリスクである場合は、追加の変数が割り当てられ、
                          最後のトークンが解析された後、行に含まれている残り
                          のテキストを受け取ります。
        usebackq        - 次の新しい表示形式を指定します。逆引用符で囲まれた
                          文字列がコマンドとして実行され、一重引用符で囲まれた
                          文字列がリテラル文字列コマンドになりファイル名セット
                          のファイル名を二重引用符で囲めるようになります。

    例を参考にしてください:

FOR /F "eol=; tokens=2,3* delims=, " %i in (myfile.txt) do @echo %i %j %k


    この例は、myfile.txt の各行を解析します。セミコロンで始まる行を無視し、
    各行の 2 番目と 3 番目のトークンを for 本体に渡します。トークンは、カンマ
    またはスペースで区切られています。for 本体の文が %i で 2 番目のトークン
    を、%j で 3 番目のトークンを取得し、%k で 3 番目以降のすべてのトークンを
    取得していることに注意してください。スペースを含むファイル名に対しては、
    二重引用符でファイル名を引用する必要があります。この方法で二重引用符を使う
    ためには、usebackq オプションを使わなければなりません。使わなければ、二重
    引用符はリテラル文字列の定義として解釈され、解析されます。

    %i は for 文で明示的に宣言され、%j と %k は tokens= オプションで暗黙的に
    宣言されています。tokens= 行を使って 26 個までのトークンを指定できますが、
    文字 'z' または 'Z' よりも高い変数を宣言することはできません。FOR 変数名は
    単一の文字で、大文字と小文字を区別し、グローバルなものであり、一度にアクティ
    ブにできるのは合計 52 個までです。

    また、カッコで囲んだファイル名セットを一重引用符で囲み、文字列にすることに
    より、即時の文字列に対する FOR /F 解析ロジックを使うこともできます。
    これは、ファイルからの単一入力行として処理されます。

    最後に、FOR /F コマンドを使って、コマンド出力を解析することができます。
    カッコの中のファイル名セットを逆引用符で囲みます。この文字列は、コマンド
    ラインとして子 CMD.EXE に渡されます。出力はメモリにキャプチャされ、ファイ
    ルのように解析されます。
    例:

      FOR /F "usebackq delims==" %i IN (`set`) DO @echo %i

    この例は、現在の環境の環境変数名を列挙します。

また、FOR 変数参照の置換も拡張されました。
次のオプション構文を使うことができます:

    %~I         - すべての引用句 (") を削除して、I を展開します。
    %~fI        - %I を完全修飾パス名に展開します。
    %~dI        - %I をドライブ文字だけに展開します。
    %~pI        - %I をパス名だけに展開します。
    %~nI        - %I をファイル名だけに展開します。
    %~xI        - %I をファイル拡張子だけに展開します。
    %~sI        - 展開されたパスは短い名前だけを含みます。
    %~aI        - %I をファイルの属性に展開します。
    %~tI        - %I ファイルの日付/時刻に展開します。
    %~zI        - %I ファイルのサイズに展開します。
    %~$PATH:I   - PATH 環境変数に指定されているディレクトリを
                  検索し、最初に見つかった完全修飾名に %I を
                  展開します。
                  環境変数名が定義されていない場合、または検索
                  してもファイルが見つからなかった場合は、この
                  修飾子を指定すると空の文字列に展開されます。

修飾子を組み合わせて、複合結果を得ることもできます:

    %~dpI       - %I をドライブ文字とパスだけに展開します。
    %~nxI       - %I をファイル名と拡張子だけに展開します。
    %~fsI       - %I を完全なパスと短い名前だけに展開します。
    %~dp$PATH:I - PATH 環境変数に指定されているディレクトリを
                  検索して %I を探し、最初に見つかったファイル
                  のドライブ文字とパスだけに展開します。
    %~ftzaI     - %I を DIR コマンドの出力行のように展開します。

上の例の %I と PATH は、ほかの有効な値で置き換えることができます。
%~ 構文は、有効な FOR 変数名によって区切られます。%I のような大
文字の変数を使うと読み取りやすく、大文字と小文字を区別しない修飾子
との混乱を避けることができます。


# if
#----------------------------------

バッチ プログラム中で条件処理を実行します。

IF [NOT] ERRORLEVEL 番号 コマンド
IF [NOT] 文字列1==文字列2 コマンド
IF [NOT] EXIST ファイル名 コマンド

  NOT               条件が偽の場合にだけ、Windows XP がコマンドを実行する
                    ことを指定します。

  ERRORLEVEL 番号   最後のプログラムの実行で指定された番号以上の終了コード
                    が返されたときに、条件が真になるように指定します。

  文字列1==文字列2  テキスト文字列が一致するときに条件が真になるように指定
                    します。

  EXIST ファイル名  指定したファイル名が存在するときに条件が真になるように
                    指定します。

  コマンド          条件が真のときに実行するコマンドを指定します。コマンドに
                    続けて、ELSE キーワードの後、指定した条件が偽の場合に
                    実行される ELSE コマンドを指定することができます。

ELSE 節は、IF の後のコマンドと同じ行に置きます。
例:

    IF EXIST filename. (
        del filename.
    ) ELSE (
        echo filename. missing.
    )

del コマンドは、改行で終了しなければならないため、次の例は、正しく動作し
ません:

    IF EXIST filename. del filename. ELSE echo filename. missing

ELSE コマンドは、IF コマンドの終わりと同じ行で始まらなければならないため、
次の例は正しく動作しません:

    IF EXIST filename. del filename.
    ELSE echo filename. missing

次の例のように、すべてのコマンドを 1 行にすれば正しく動作します:

    IF EXIST filename. (del filename.) ELSE echo filename. missing

コマンド拡張機能を有効にすると、IF は次のように変更されます:

    IF [/I] 文字列1 比較演算子 文字列2 コマンド
    IF CMDEXTVERSION 番号 コマンド
    IF DEFINED 変数 コマンド

比較演算子は、次のいずれかです:

    EQU - 等しい
    NEQ - 等しくない
    LSS - より小さい
    LEQ - 以下
    GTR - より大きい
    GEQ - 以上

/I スイッチを指定すると、文字列は、大文字と小文字を区別せずに比較され
ます。/I スイッチは、IF の 文字列1==文字列2 形式で使うこともできます。
この比較は汎用であり、文字列1 と 文字列2 が両方とも数字だけを含む場合
は、文字列が数値に変換され、数値の比較が行われます。

CMDEXTVERSION 条件は ERRORLEVEL と同様に動作しますが、コマンド拡張機能
に関連付けられている内部バージョン番号との比較を行います。最初のバー
ジョンは 1 です。コマンド拡張機能に重要な拡張が追加された場合は、値が
1 大きくなります。コマンド拡張機能が無効である場合は、CMDEXTVERSION は
条件は常に偽です。

DEFINED 条件は EXISTS と同様に動作しますが、環境変数名を受け取って、環境
変数が定義されている場合は真を返します。

%ERRORLEVEL% は、ERRORLEVEL の現在の値の文字列表記に展開されます。
ただし、ERRORLEVEL という名前の環境変数が既に定義されている場合は、その
環境変数の値が取得されます。プログラム実行後、次の例が ERRORLEVEL の使い方
を説明しています:

    goto answer%ERRORLEVEL%
    :answer0
    echo Program had return code 0
    :answer1
    echo Program had return code 1

また、上の数値比較を使うこともできます:

    IF %ERRORLEVEL% LEQ 1 goto okay

%CMDCMDLINE% は、CMD.EXE が処理する前の、CMD.EXE に渡されたオリジナル
のコマンド ラインに展開されます。ただし、CMDCMDLINE という名前の環境変数
が既に定義されている場合は、その環境変数の値が取得されます。

%CMDEXTVERSION% は、CMDEXTVERSION の現在の値の文字列表記に展開されます。
ただし、CMDEXTVERSION という名前の環境変数が既に定義されている場合は、その
環境変数の値が取得されます。


# goto
#----------------------------------

バッチ プログラム内の、ラベルで指定されている行へ制御を移動します。

GOTO ラベル

  ラベル   バッチ プログラムでラベルとして使用するテキスト文字列を指定します。

ラベルの先頭には : (コロン) を指定し、ラベルだけを単独で 1 行に入力してくだ
さい。

コマンド拡張機能を有効にすると、GOTO は次のように変更されます:

GOTO コマンドにターゲット ラベルとして :EOF を指定し、現在のバッチ
スクリプト ファイルの最後に制御を移すことができるようになります。
ラベルを定義しないでバッチ スクリプト ファイルを終了するには、この方法
が簡単です。この機能を実用化する CALL コマンドの拡張機能の説明について
は、CALL /? と入力してください。


# call
#----------------------------------

バッチ プログラムを別のバッチ プログラムから呼び出します。

CALL [ドライブ:][パス]ファイル名 [バッチパラメータ]

  バッチパラメータ   バッチ プログラムで必要なコマンド ライン情報を指定します。

コマンド拡張機能を有効にすると、CALL は次のように変更されます:

CALL コマンドは、CALL のターゲットとしてラベルを受け付けるようになります。
構文は、次のとおりです:

    CALL :ラベル 引数

指定された引数で新しいバッチ ファイル コンテキストが作成され、指定
されたラベルの次の文に制御が渡されます。バッチ スクリプト ファイルの
最後に 2 回到達することによって、2 回 "終了" する必要があります。
1 回目に最後に到達したときには、制御は CALL 文の次の行に返されます。
2 回目に、バッチ スクリプトが終了します。バッチ スクリプトから "戻る"
ための GOTO :EOF 拡張機能の説明については、GOTO /? と入力してください。

また、バッチ スクリプトの引数参照 (%0、%1 など) の展開は、次のように
変更されました:


    %* バッチ スクリプト内では、すべての引数 (%1、%2、%3、%4、
        %5 など) を参照します。

    バッチ パラメータ (%n) の置換は拡張されました。次のオプション構文
    を使うことができます:

        %~1         - すべての引用句 (") を削除して、
                      %1 を展開します。
        %~f1        - %1 を完全修飾パス名に展開します。
        %~d1        - %1 をドライブ文字だけに展開します。
        %~p1        - %1 をパスだけに展開します。
        %~n1        - %1 をファイル名だけに展開します。
        %~x1        - %1 をファイル拡張子だけに展開します。
        %~s1        - 展開されたパスは、短い名前だけを含みます。
        %~a1        - %1 をファイル属性に展開します。
        %~t1        - %1 をファイルの日付/時刻に展開します。
        %~z1        - %1 をファイルのサイズに展開します。
        %~$PATH:1   - PATH 環境変数に指定されているディレクトリを
                      検索し、最初に見つかった完全修飾名に %1 を
                      展開します。環境変数名が定義されていない場合、
                      または検索してもファイルが見つからなかった
                      場合は、この修飾子を指定すると空の文字列に
                      展開されます。

    修飾子を組み合わせて、複合結果を得ることもできます:

        %~dp1       - %1 をドライブ文字とパスだけに展開します。
        %~nx1       - %1 をファイル名と拡張子だけに展開します。
        %~dp$PATH:1 - PATH 環境変数に指定されているディレクトリを
                      検索して %1 を探し、最初に見つかったファイル
                      のドライブ文字とパスだけに展開します。
        %~ftza1     - %1 を DIR の出力行のように展開します。

    上の例の %1 と PATH は、ほかの有効な値で置き換えることができ
    ます。%~ 構文は有効な引数の数によって区切られます。%~ 修飾子
    は %* と同時には使用できません。

# pushd
#----------------------------------

POPD コマンドで使用するために現在のディレクトリを保存し、
指定したディレクトリに変更します。

PUSHD [パス | ..]

  パス        現在のディレクトリとして設定するディレクトリを指定します。

コマンド拡張機能を有効にすると、PUSHD コマンドは、通常のドライブ文字
とパスだけでなくネットワーク パスも受け付けるようになります。
ネットワーク パスを指定した場合は、PUSHD は指定されたネットワーク
リソースを指し示す一時的なドライブ文字を作成し、新しく定義されたドライブ
文字を使って現在のドライブとディレクトリを変更します。一時的なドライ
ブ文字は、Z: から前へ順に、最初に見つかった未使用のドライブ文字が
割り当てられます。

# popd
#----------------------------------

PUSHD コマンドで記憶されたディレクトリに変更します。

POPD


コマンド拡張機能を有効にすると、POPD コマンドは、プッシュされている
ディレクトリ スタックからドライブを POPD するときに、PUSHD が作成した
一時的なドライブ文字を削除します。


# exit
#----------------------------------

CMD.EXE プログラム (コマンド インタープリタ) またはバッチ スクリプトを終了
します。
EXIT [/B] [終了コード]
  /B          CMD.EXE ではなく、現在のバッチ スクリプトを終了するように指定
              します。バッチ スクリプトの外から実行された場合、CMD.EXE を終
              了させます。
  終了コード  数値を指定します。/B が指定されている場合、ERRORLEVEL にその
              数値を設定します。CMD.EXE 終了をする場合、プロセス終了コードに
              その数値を設定します。

# pause
#----------------------------------

バッチ プログラムの処理を一時停止し、
"続行するには何かキーを押してください . . ."
というメッセージを表示します。


# rem
#----------------------------------

バッチ ファイルまたは CONFIG.SYS にコメント (注釈) を記録します。

REM [コメント]


# setlocal
#----------------------------------

バッチ ファイルで環境変更のローカライズを開始します。SETLOCAL を実行した後で
変更した環境設定は、そのバッチ ファイルだけで有効です。前の設定を復元するときは
ENDLOCAL を実行しなければなりません。バッチ スクリプトの終わりに達したとき、
暗示的な ENDLOCAL が、そのバッチ スクリプトによって発行されたすべての未完了の
SETLOCAL コマンドのために実行されます。

SETLOCAL

コマンド拡張機能を有効にすると、SETLOCAL は次のように変更されます:

SETLOCAL バッチ コマンドは、オプション引数を受け取ることができます:
        ENABLEEXTENSIONS / DISABLEEXTENSIONS
            は、コマンド処理機能を有効または無効にできます。詳細に
            ついては、CMD /? を参照してください。
        ENABLEDELAYEDEXPANSION / DISABLEDELAYEDEXPANSION
            は、遅延環境変数の展開を有効または無効にできます。詳細
            については、CMD /? を参照してください。
これらの変更は、SETLOCAL コマンドの実行前の設定にかかわらず、対応する
ENDLOCAL コマンドを実行するまで継続されます。

SETLOCAL コマンドに引数を指定すると、ERRORLEVEL の値が設定されます。
2 つの有効な引数が指定された場合は 0、そうでない場合は 1 になります。
この機能をバッチ スクリプトで使って、拡張機能が利用可能かどうかを判断
することができます。それには、次のように入力します:

    VERIFY OTHER 2>nul
    SETLOCAL ENABLEEXTENSIONS
    IF ERRORLEVEL 1 echo 拡張機能を有効にできません

この方法が使えるのは、古いバージョンの CMD.EXE では、SETLOCAL は
ERRORLEVEL の値を設定しないためです。VERIFY コマンドに誤った引数を
指定すると、ERRORLEVEL の値は 0 以外の値に初期化されます。

# endlocal
#----------------------------------

バッチ ファイルの環境変更のローカル化を終了します。
ENDLOCAL を実行した後で変更した環境設定はバッチ ファイル固有の設定で
はありません。バッチ ファイルを終了しても前の設定は復元されません。

ENDLOCAL

コマンド拡張機能を有効にすると、ENDLOCAL は次のように変更されます:

対応する SETLOCAL が新しい ENABLEEXTENSIONS または DISABLEEXTENSIONS
オプションを使ってコマンド拡張機能を有効または無効にしている場合は、
ENDLOCAL を実行した後、コマンド拡張機能の有効または無効の状態は対応
する SETLOCAL コマンドを実行する前の状態に復元されます。

# more
#----------------------------------

出力を一度に 1 画面ずつ表示します。

MORE [/E [/C] [/P] [/S] [/Tn] [+n]] < [ドライブ:][パス]ファイル名
コマンド名 | MORE [/E [/C] [/P] [/S] [/Tn] [+n]]
MORE /E [/C] [/P] [/S] [/Tn] [+n] [ファイル]

    [ドライブ:][パス]ファイル名
            一度に 1 画面ずつ表示するファイルを指定します。

    コマンド名
            出力を表示するコマンドを指定します。

    /E      拡張機能を有効にします。
    /C      ページを表示する前に画面を消去します。
    /P      フォーム フィード文字を展開します。
    /S      複数の空白行を 1 行に縮小します。
    /Tn     タブを n 個のスペースに置き換えます (既定値は 8 です)。

            スイッチは MORE の環境変数として設定することが可能です。

    +n      最初のファイルを n 行目から表示します。

    ファイル
            表示するファイルの一覧を指定します。ファイル名はスペースで
            区切ってください。

    拡張機能が利用できる場合、-- More -- プロンプトで以下のコマンドを
    使用できます。

    P n     次の n 行を表示します。
    S n     次の n 行をスキップします。
    F       次のファイルを表示します。
    Q       終了します。
    =       行番号を表示します。
    ?       ヘルプを表示します。
    <space> 次ページを表示します。
    <ret>   次の行を表示します。


# find
#----------------------------------

ファイル (複数可) 内のテキスト文字列を検索します。

FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] "文字列" [[ドライブ:][パス]ファイル名[...]]

  /V        指定した文字列を含まない行をすべて表示します。
  /C        指定した文字列を含む行の数だけを表示します。
  /N        行番号を表示します。
  /I        大文字と小文字の区別をしないで検索します。
  /OFF[LINE] オフライン属性が設定されたファイルをスキップしません。
  "文字列"  検索する文字列を指定します。
  [ドライブ:][パス]ファイル名
            検索するファイル (複数可) を指定します。

パスが指定されていないときは、プロンプトで入力されたテキストまた
は別のコマンドからパイプ処理で渡されたテキストを検索します。


# ftp --help
#----------------------------------

Transfers files to and from a computer running an FTP server service
(sometimes called a daemon). Ftp can be used interactively.

FTP [-v] [-d] [-i] [-n] [-g] [-s:filename] [-a] [-w:windowsize] [-A] [host]

  -v             Suppresses display of remote server responses.
  -n             Suppresses auto-login upon initial connection.
  -i             Turns off interactive prompting during multiple file
                 transfers.
  -d             Enables debugging.
  -g             Disables filename globbing (see GLOB command).
  -s:filename    Specifies a text file containing FTP commands; the
                 commands will automatically run after FTP starts.
  -a             Use any local interface when binding data connection.
  -A             login as anonymous.
  -w:buffersize  Overrides the default transfer buffer size of 4096.
  host           Specifies the host name or IP address of the remote
                 host to connect to.

Notes:
  - mget and mput commands take y/n/q for yes/no/quit.
  - Use Control-C to abort commands.

# date
#----------------------------------

日付を表示または設定します。

DATE [/T | 日付]

パラメータの指定がない場合は、現在の日付が表示され、新しい日付の入力を
求められます。変更しない場合は、Enter キーを押します。

コマンド拡張機能を有効にすると、DATE コマンドは、/T スイッチを
サポートするようになります。このスイッチを指定すると、現在の日付
だけが表示され、新しい日付を入力するためのプロンプトは表示されません。

# time
#----------------------------------

システム時刻を表示または設定します。

TIME [/T | 時刻]

パラメータの指定がなければ、現在の設定が表示され、新しい時刻を入力できる
プロンプトになります。変更しない場合は、Enter キーを押してください。

コマンド拡張機能を有効にすると、TIME コマンドは、/T スイッチを
サポートするようになります。このスイッチを指定すると、現在の時刻
だけが表示され、新しい時刻を入力するためのプロンプトは表示されません。

# path
#----------------------------------

実行可能ファイルの検索パスを表示または設定します。

PATH [[ドライブ:]パス[;...][;%PATH%]]
PATH ;

パラメータとして ; (セミコロン) だけを指定すると、すべての検索パスは
クリアされて現在のディレクトリだけが検索されます。
パラメータの指定がなければ、現在のパスが表示されます。
新しいパス設定に %PATH% を指定すると、前のパスが新しい設定に追加されます。

# runas
#----------------------------------

RUNAS 使用法:

RUNAS [ [/noprofile | /profile] [/env] [/netonly] ]
        /user:<ユーザー名> プログラム

RUNAS [ [/noprofile | /profile] [/env] [/netonly] ]
        /smartcard [/user:<ユーザー名>] プログラム

   /noprofile        ユーザーのプロファイルを読み込まないように指定します。
                     この結果、アプリケーションをより速く読み込むことができま
                     すが、一部のアプリケーションが正しく動作しない可能性があ
                     ります。
   /profile          ユーザーのプロファイルを読み込むように指定します。
                     これは既定値です。
   /env              ユーザーの環境ではなく、現在の環境を使用する場合に使います
   /netonly          指定された資格情報をリモート アクセスのみで使用する場合に
                     使います。
   /savecred         ユーザーが以前に保存した資格情報を使います。
                     このオプションは Windows XP Home Edition では利用できない
                     ので無視されます。
   /smartcard        資格情報がスマート カードから提供される場合に使います。

   /user             <ユーザー名> の形式は、"ユーザー@ドメイン" または
                     "ドメイン\ユーザー" です
   プログラム        実行可能なコマンドラインです。下の例を参照してください。

例:
> runas /noprofile /user:mymachine\administrator cmd
> runas /profile /env /user:mydomain\admin "mmc %windir%\system32\dsa.msc"
> runas /env /user:user@domain.microsoft.com "notepad \"my file.txt\""

注意:  要求されたときのみ、ユーザーのパスワードを入力してください。
注意:  USER@DOMAIN は /netonly と互換性がありません。
注意:  /profile は /netonly と互換性がありません。

# start
#----------------------------------

指定されたプログラムまたはコマンドを実行するためにウィンドウを開きます。

START ["タイトル"] [/Dパス] [/I] [/MIN] [/MAX] [/SEPARATE | /SHARED]
      [/LOW | /NORMAL | /HIGH | /REALTIME | /ABOVENORMAL | /BELOWNORMAL]
      [/WAIT] [/B] [コマンド/プログラム]
      [パラメータ]

    "タイトル"  ウィンドウのタイトル バーに表示するタイトル。
    パス        開始するディレクトリ。
    B           新しいウィンドウを作成せずにアプリケーションを起動します。
                アプリケーションは Ctrl+C を無視します。
                アプリケーションで Ctrl+C を有効にしていない限り、
                Ctrl+Break がアプリケーションを中断する唯一の方法です。
    /I          新しい環境は、現在の環境ではなく、cmd.exe に渡された元の環境に
                なります。
    /MIN        ウィンドウを最小化の状態で起動します。
    /MAX        ウィンドウを最大表示の状態で起動します。
    /SEPARATE   16 ビットの Windows プログラムを別メモリ領域で起動します。
    /SHARED     16 ビットの Windows プログラムを共有メモリ空間で起動します。
    /LOW        IDLE 優先度クラスでアプリケーションを起動します。
    /NORMAL     NORMAL 優先度クラスでアプリケーションを起動します。
    /HIGH       HIGH 優先度クラスでアプリケーションを起動します。
    /REALTIME   REALTIME 優先度クラスでアプリケーションを起動します。
    /ABOVENORMAL
                ABOVENORMAL 優先度クラスでアプリケーションを起動します。
    /BELOWNORMAL
                BELOWNORMAL 優先度クラスでアプリケーションを起動します。
    /WAIT       アプリケーションを起動し、終了するまで待ちます。
    コマンド/プログラム
                内部コマンドまたはバッチ ファイルの場合、コマンド プロセッサ
                は cmd.exe の /K オプションを使用して実行されます。これは、コ
                マンドの実行の後でもウィンドウが残ることを意味します。
                内部コマンドまたはバッチ ファイルではない場合、そのプログラム
                はウィンドウ モードのアプリケーションまたはコンソール アプリ
                ケーションとして動作します。

    パラメータ  コマンド/プログラムに渡すパラメータです。


コマンド拡張機能を有効にすると、コマンド ラインまたは START コマンドに
よる外部コマンドの起動は、次のように変更されます:

非実行可能ファイルは、ファイル名をコマンドとして入力することによって、
    ファイルの関連付けを使って開くことができます (例:  WORD.DOC は .DOC
    ファイル拡張子に関連付けられているアプリケーションを起動します)。
    コマンド スクリプト内でファイルの関連付けを作成する方法については、
    ASSOC と FTYPE コマンドを参照してください。

32 ビット GUI アプリケーションを実行する場合、CMD.EXE は、アプリケー
    ションの終了を待たずにコマンド プロンプトに戻ります。コマンド スク
    リプト内で実行する場合は、この動作は発生しません。

最初のトークンが拡張子やパス修飾子を持たない文字列 "CMD" であるコマンド
    ラインを実行する場合、"CMD" が COMSPEC 変数の値で置き換えられます。
    これにより現在のディレクトリの CMD.EXE が使われないようにします。

最初のトークンが拡張子を含まないコマンド ラインを実行する場合、CMD.EXE
    は、PATHEXT 環境変数の値を使って拡張子の種類と順序を判断します。
    PATHEXT 変数の既定値は、次のとおりです:

        .COM;.EXE;.BAT;.CMD

    この構文は PATH 変数と同じであり、各要素はセミコロンで区切られて
    いることに注意してください。

実行可能なファイルを検索するときにどの拡張子でも一致するファイルが見つ
からない場合は、拡張子なしの名前がディレクトリ名と一致するかどうかを調
べます。一致する場合は、START コマンドがそのパスでエクスプローラを起動
します。コマンド ラインから実行した場合は、そのパスに対する CD /D の実
行と同じになります。

# systeminfo
#----------------------------------

SYSTEMINFO [/S システム [/U ユーザー名 [/P パスワード]]] [/FO 形式] [/NH]

説明:
    このコマンド ライン ツールによって、管理者は基本システム構成情報
    のクエリができます。

パラメータ一覧:
    /S    システム            接続先のリモート システムを指定します。

    /U    [ドメイン\]ユーザー 実行するコマンドのユーザー コンテキストを指定
                              します。

    /P    [パスワード]        提供されたユーザー コンテキストのパスワードを指定
                              します。省略された場合は、入力を要求します。

    /FO    形式               表示される形式を指定します。
                              有効な値: "TABLE", "LIST", "CSV"。

    /NH                       出力しない "カラム ヘッダー" を指定します。

                              "TABLE"と "CSV" の形式のみ有効です。

    /?                        ヘルプと使用法を表示します。

例:
    SYSTEMINFO
    SYSTEMINFO /?
    SYSTEMINFO /S システム
    SYSTEMINFO /S システム /U ユーザー
    SYSTEMINFO /S システム /U ドメイン\ユーザー /P パスワード /FO TABLE
    SYSTEMINFO /S システム /FO LIST
    SYSTEMINFO /S システム /FO CSV /NH

# 
#----------------------------------


# 
#----------------------------------


# 
#----------------------------------


